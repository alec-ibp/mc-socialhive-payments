from __future__ import annotations

from typing import Any

from redis.client import Redis

from src.payments.domain.events import Event, CreatePayment, CompletedPayment
from src.payments.infrastructure.adapters.db import get_redis_session


def handler(event: Event, by_batch: bool = False):
    if by_batch:
        for handler in HANDLERS[type(event)]:
            handler(event)
    else:
        return HANDLERS[type(event)](event)


def create_payment_event(event: CreatePayment) -> Any:
    print("Sending charge payment event")
    # just mocking a delay
    import time
    time.sleep(5)
    return event


def completed_payment_event(event: CompletedPayment) -> Any:
    redis_session: Redis = get_redis_session()
    redis_session.xadd("payment_completed", event.dict(), "*")  # Topic, Data, ID (* -> autogenerated)


HANDLERS: dict[Event, callable] = {
    CreatePayment: create_payment_event,
    CompletedPayment: completed_payment_event
}
